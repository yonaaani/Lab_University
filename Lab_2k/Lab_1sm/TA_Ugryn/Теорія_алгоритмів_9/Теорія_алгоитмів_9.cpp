#include <iostream>
#include <cstring>
using namespace std;

#define INF 9999999

// кількість вершин у графі
#define V 8

// створила двовимірний масив розміром 8x8
// створила матрицю суміжності для представлення графа

int G[V][V] = {
  {0, 1, 4, 5, 3, 2, 2, 4},
  {1, 0, 3, 7, 4, 3, 4, 1},
  {4, 3, 0, 4, 1, 1, 3, 4},
  {5, 6, 4, 6, 3, 6, 8, 8},
  {5, 4, 1, 6, 0, 5, 4, 6},
  {2, 3, 6, 3, 5, 0, 3, 5},
  {6, 3, 3, 7, 4, 3, 0, 2},
  {4, 1, 4, 8, 5, 5, 2, 0}
};

int main() {

    int no_edge;            // кількість ребер

    // створила масив для відстеження вибраної вершини
    // вибране стане істинним, інакше стане хибним
    int selected[V];

    // спочатку встановила вибране значення false
    memset(selected, false, sizeof(selected));

    // кількість ребер = 0
    no_edge = 0;

    // кількість ребер у мінімальному остовному дереві буде
    // завжди менше ніж (V -1), де V — кількість вершин у
    // графі

    // виберіть 0-ву вершину та зробила її істинною
    selected[0] = true;

    int x;            //  номер рядка
    int y;            //  номер колонки

    // друк для ребра та ваги
    cout << "Edge" << " : " << "Weight";
    cout << endl;
    while (no_edge < V - 1) {

        // Для кожної вершини множини S знайшла усі суміжні вершини
        // , обчислила відстань від вершини, вибраної на кроці 1.
        // якщо вершина вже є в множині S, інакше її відкинула
        // вибрала іншу вершину, найближчу до вибраної вершини на кроці 1.

        int min = INF;
        x = 0;
        y = 0;

        for (int i = 0; i < V; i++) {
            if (selected[i]) {
                for (int j = 0; j < V; j++) {
                    if (!selected[j] && G[i][j]) { // не в обраному і є край
                        if (min > G[i][j]) {
                            min = G[i][j];
                            x = i;
                            y = j;
                        }

                    }
                }
            }
        }
        cout << x << " - " << y << " :  " << G[x][y];
        cout << endl;
        selected[y] = true;
        no_edge++;
    }

    return 0;
}